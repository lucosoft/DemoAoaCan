/*****************************************************************************
 *
 *   Copyright(C) 2011, Embedded Artists AB
 *   All rights reserved.
 *
 ******************************************************************************
 * Software that is described herein is for illustrative purposes only
 * which provides customers with programming information regarding the
 * products. This software is supplied "AS IS" without any warranties.
 * Embedded Artists AB assumes no responsibility or liability for the
 * use of the software, conveys no license or title under any patent,
 * copyright, or mask work right to the product. Embedded Artists AB
 * reserves the right to make changes in the software without
 * notification. Embedded Artists AB also make no representation or
 * warranty that such application will be suitable for the specified
 * use without further testing or modification.
 *****************************************************************************/

/******************************************************************************
 * Includes
 *****************************************************************************/

#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_ssp.h"
#include "lpc17xx_uart.h"
#include "lpc17xx_timer.h"
#include "lpc17xx_can.h"
#include <string.h>
#include <stdio.h>

#include "board.h"
//#include "eeprom.h"
//#include "rgb.h"
//#include "btn.h"
//#include "time.h"

#include "canpt.h"

//#include "USB.h"
#include "AndroidAccessoryHost.h"

/******************************************************************************
 * Typdefs and defines
 *****************************************************************************/

#define DISCOVER_TIME_MS (5000)

/******************************************************************************
 * Local variables
 *****************************************************************************/

static uint32_t msTicks = 0;
static uint32_t lastDiscover = 0;

static uint32_t msTicksL = 0;

/******************************************************************************
 * Public variables
 *****************************************************************************/

CAN_MSG_Type txMsg;
CAN_MSG_Type rxMsg;

/******************************************************************************
 * Local functions
 *****************************************************************************/

/******************************************************************************
 * Public functions
 *****************************************************************************/


uint32_t getMsTicks(void)
{
  return msTicks;
}

void SysTick_Handler(void) {
  msTicks++;
  msTicksL++;

}

int main (void)
{

//  console_init();
//  console_sendString((uint8_t*)"Demo - AOA CAN\r\n");

  SysTick_Config(SystemCoreClock / 1000);

//  canpt_init();
  canpt_init(LPC_CAN1,33333);

  while(1) {

    if (lastDiscover + DISCOVER_TIME_MS < getMsTicks()) {
      lastDiscover = getMsTicks();
//      canpt_discover();

      txMsg.id = CANPT_MSG_CMN_ID_DISC;
      txMsg.dataA[0] = CANPT_NODE_UNIQUE_ID;
      txMsg.len = 0 + 1;

      sendMessage(LPC_CAN1, CANPT_MSG_CMN_ID_DISC, 0);

    }

    canpt_task();

    if (1000 < msTicksL) {
    	msTicksL = 0;

    }


  }

}


void check_failed(uint8_t *file, uint32_t line)
{
  /* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while(1);
}

